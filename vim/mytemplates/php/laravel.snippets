priority -50


global !p
def last(text):
	return re.sub('.*?(\w*);?$', r'\1', text)

def last_lower(text):
	return re.sub('.*?(\w*);?$', r'\1', text).downcase()
endglobal


snippet _t_laravel_class "Laravel Test" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[a-zA-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
	snip.rv = snip.rv[0].upper() + snip.rv[1:]
`};

/**
 * Class ${2:`!p snip.rv=snip.basename`}
 *
 * @author ${3:`!v g:snips_author`}
 */
class $2
{
	$0
}
endsnippet


snippet _t_laravel_test "Laravel Test" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[a-zA-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
	snip.rv = snip.rv[0].upper() + snip.rv[1:]
`};

use Tests\\TestCase;

/**
 * Class ${2:`!p snip.rv=snip.basename`}
 *
 * @author ${3:`!v g:snips_author`}
 */
class $2 extends TestCase
{
	$0
}
endsnippet


snippet _t_laravel_controller "Laravel Controller" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = "App\\" + m.group().replace('/', '\\')
`};

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

/**
 * Class ${2:`!p snip.rv=snip.basename`}
 *
 * @author ${3:`!v g:snips_author`}
 */
class $2 extends Controller
{
	public function getIndex(Request $request)
	{
		$0
	}
}
endsnippet


snippet _t_laravel_controller_crud_html "Laravel CRUD HTML Controller" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = "App\\" + m.group().replace('/', '\\')
`};

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use ${4:App\Entity};
$0
/**
 * Class ${2:`!p snip.rv=snip.basename`}
 *
 * @author ${3:`!v g:snips_author`}
 */
class $2 extends Controller
{
	/**
	 * Display a listing of the resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function index(${5:`!p snip.rv = last(t[4])`} $${6:`!p snip.rv = last(t[4]).lower()`})
	{
		return view('${7:$6}.index', [
			'${8:$6s}' => $$6::all()
		]);
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function create(Request $request, $5 $$6)
	{
		$$6->fill($request->old());
		$request->session()->reflash();

		return view('$7.create', [
			'${9:$6}' => $$6
		]);
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @param  \Illuminate\Http\Request $request
	 * @return \Illuminate\Http\Response
	 */
	public function store(Request $request, $5 $$6)
	{
		return $this->update($request, $$6);
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  $5 $$6
	 * @return \Illuminate\Http\Response
	 */
	public function show($5 $$6)
	{
		return view('$7.show', [
			'$9' => $$6
		]);
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  $5 $$6
	 * @return \Illuminate\Http\Response
	 */
	public function edit(Request $request, $5 $$6)
	{
		$$6->fill($request->old());
		$request->session()->reflash();

		return view('$7.edit', [
			'$9' => $$6
		]);
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  \Illuminate\Http\Request $request
	 * @param  $5 $$6
	 * @return \Illuminate\Http\Response
	 */
	public function update(Request $request, $5 $$6)
	{
		$request->flash();

		$this->validate$5($request);

		$$6
			->fill($this->get$5Params($request))
			->save();

		return redirect(route('$7.show', $$6));
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  $5 $$6
	 * @return \Illuminate\Http\Response
	 */
	public function destroy($5 $$6)
	{
		$$6->delete();
		return redirect(route('$7.index'));
	}

	protected function get$5Params(Request $request)
	{
		return array_only($request->input(), [
			${10:// 'name',}
		]);
	}

	protected function validate$5(Request $request)
	{
		return $this->validate($request, [
			${11:// 'name' => 'required|max:20',}
		]);
	}
}
endsnippet

snippet _t_laravel_console_command "Laravel Artisan Command" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = "App\\" + m.group().replace('/', '\\')
`};

use Illuminate\Console\Command;

/**
 * Class ${2:`!p snip.rv=snip.basename`}
 *
 * @author ${3:`!v g:snips_author`}
 */
class $2 extends Command
{
	/**
	 * The name and signature of the console command.
	 *
	 * @var string
	 */
	protected $signature = '${4:`!v templates#tsfile('basename|snakecase', ['_', ':', 'g'])`}';

	/**
	 * The console command description.
	 *
	 * @var string
	 */
	protected $description = '${5:`!v templates#tfile('basename|snakecase|blank')`}';

	/**
	 * Execute the console command.
	 *
	 * @return mixed
	 */
	public function handle()
	{
		$0
	}
}
endsnippet
