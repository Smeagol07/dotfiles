priority -50


global !p
def snake_to_mixed(column):
   words = column.split('_')
   return ''.join(word.capitalize() for word in words)

def module_name(text, strip_test=False, add_app=True):
	prefix = '.'
	text = text.replace(vim.eval('templates#elixir#approot()') + '/', '')
	appmod = vim.eval('templates#elixir#appmod()').lower()
	appname = vim.eval('templates#elixir#appname()').lower()
	text = re.sub('^(lib|web|test)?/?(.*).ex.?$', r'\2', text)
	parts = text.split('/')
	if len(parts) >= 2 and parts[-1] == parts[-2]:
		parts.pop()
	if len(parts) >= 2 and parts[-1] == parts[-2] + '_test':
		parts.remove(parts[-2])
	if add_app and appmod:
		parts.insert(0, appmod)
	if parts[0] == appmod:
		parts.remove(parts[0])
	if parts[0] == appname:
		parts.remove(parts[0])
	if parts[0] == appname + '_web':
		parts.remove(parts[0])
		prefix = 'Web.'
	if strip_test:
		parts[-1] = re.sub('_test$', '', parts[-1])

	if re.match('.*_controller(_test)?$', parts[-1]):
	  parts = [x for x in parts if x != 'controllers']
	if re.match('.*_view(_test)?$', parts[-1]):
	  parts = [x for x in parts if x != 'views']
	if re.match('.*_socket(_test)?$', parts[-1]):
	  parts = [x for x in parts if x != 'channels']

	return prefix + '.'.join(snake_to_mixed(part) for part in parts)
endglobal


snippet _t_phoenix_skel "Phoenix Module Skeleton" b
defmodule ${1:`!v
templates#elixir#appmod()`}${2:`!p
snip.rv = module_name(path, add_app=False)`} do
	def ${3:function_name()} do
		$0
	end
end
endsnippet


snippet _t_phoenix_test_model "Phoenix Model Test" b
defmodule ${1:`!v
templates#elixir#appmod()`}${2:`!p
snip.rv = module_name(path, strip_test=True)`} do
	use $1.ModelCase

	alias $1.${3:`!p snip.rv = module_name(path) `}

	test "${4:test something}" do
		$0${5:assert true}
	end
end
endsnippet


snippet _t_phoenix_test_controller "Phoenix Controller Test" b
defmodule ${1:`!v
templates#elixir#appmod()`}${2:`!p
snip.rv = module_name(path, add_app=False)`} do
	use $1.ConnCase

	alias $1.${3:`!p snip.rv = module_name(path, add_app=False, strip_test=True)`}

	test "${4:test something}" do
		$0${5:assert true}
	end
end
endsnippet


snippet _t_phoenix_test_view "Phoenix View Test" b
defmodule ${1:`!v
templates#elixir#appmod()`}${2:`!p
snip.rv = module_name(path, add_app=False)`} do
	use $1.ConnCase, async: true

	test "${4:test something}" do
		$0${5:assert true}
	end
end
endsnippet


snippet _t_phoenix_view "Phoenix View Test" b
defmodule ${1:`!v
templates#elixir#appmod()`}${2:`!p
snip.rv = module_name(path, add_app=False)`} do
	use $1.Web, :view
end
endsnippet
