priority -50

global !p
def splitArguments(text):
	arguments = text.split(',')
	arguments = [argument.strip() for argument in arguments if argument]
	arguments = [argument.split(' ') for argument in arguments if argument]

	return arguments

def formatProperty(argument):
	if len(argument) == 2 :
		property = argument[1].strip()
	else:
		property = argument[0].strip()

	return "protected {0} = null;".format(property)

def formatTag(argument):
	if len(argument) == 2 :
		type = argument[0].strip()
		variable = argument[1].strip()
	else:
		type = 'mixed'
		variable = argument[0].strip()

	return " * @param {0} {1}".format(type, variable)

def formatPropertyAssign(argument):
	if len(argument) == 2 :
		property = argument[1].strip()
	else:
		property = argument[0].strip()

	return "$this->{0} = {1};".format(property.replace('$', ''), property)
endglobal

snippet fname "base file name"
${1:`!v expand('%:t:r')`}
endsnippet

snippet = "echo" i
<?php echo ${VISUAL}$0 ?>
endsnippet

snippet =if "template if" i
<?php if(${1:true}): ?>
	${VISUAL}$0
<?php endif ?>
endsnippet

snippet doc "Add class documentation" "re.match('.*\\bclass\\b.*', snip.buffer[snip.line+1]) if len(snip.buffer) > snip.line+1 else False" e
/**
 * ${1:`!p
if snip.c == "":
	line = snip.buffer[vim.current.window.cursor[0]].strip()
	class_name = re.sub(r".*?class \b(.*)\b.*?", "\\1", line).strip()
	snip.rv = 'Class ' + class_name
`}
 *
 * @author ${2:`!v g:snips_author`}
 */$0
endsnippet

snippet doc "Add function documentation" "re.match('.*\\bfunction\\b.*', snip.buffer[snip.line+1]) if len(snip.buffer) > snip.line+1 else False" e
/**
 * ${1:Documentation}`!p
if snip.c == "":
	line = snip.buffer[vim.current.window.cursor[0]].strip()
	args = re.sub(r".*?\((.*)\).*?", "\\1", line).strip()
	snip += ' *'
	arguments = splitArguments(args)
	if len(args) and len(arguments):
		tags = map(formatTag, arguments)
		for tag in tags:
			snip += tag
`
 * ${2:@return ${3:null}}
 */$0
endsnippet

snippet cn "construct"
${3:`!p
arguments = splitArguments(t[1])
if len(arguments):
	props = map(formatProperty, arguments)
	for prop in props:
		if snip.rv == '':
			snip.rv = prop
		else:
			snip += prop
`}`!p
if len(t[3].strip()):
	snip << 1
	snip += ''
	snip >> 1
	snip += ''
`/**
 * Constructor
`!p
arguments = splitArguments(t[1])
if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = ' *'
	for tag in tags:
		snip += tag
	snip += ''
else:
	snip.rv = ''
` */
public function __construct(${1})
{`!p
arguments = splitArguments(t[1])
if len(arguments):
	snip >> 1
	props = map(formatPropertyAssign, arguments)
	for prop in props:
		snip += prop
`${2:${VISUAL}}$0
}
endsnippet

snippet fn "function"
`!p
visibility = t[1].title();
snip.rv = "/**"
snip += ' * ' + visibility + ' function ' + t[2]
`
`!p
arguments = splitArguments(t[3])
if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = ' *'
	for tag in tags:
		snip += tag
	snip += ''
else:
	snip.rv = ''
` */
${1:public} function ${2:name}(${3})
{
	${0:${VISUAL}}
}
endsnippet

snippet getf "getter function"
`!p
visibility = t[1].title();
snip.rv = "/**"
snip += ' * Gets ' + t[2]
snip += ' *'
`
 * @return ${4:mixed}
 */
public function get${2:Property}()
{
	return $this->${3:`!p snip.rv = t[2].lower()`};
}$0
endsnippet

snippet setf "setter function"
`!p
visibility = t[1].title();
snip.rv = "/**"
snip += ' * Set ' + t[2]
`
`!p
arguments = splitArguments(t[3])
if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = ' *'
	for tag in tags:
		snip += tag
	snip += ''
else:
	snip.rv = ''
` *
 * @return `!p snip.rv = snip.basename`
 */
public function set${2:Property}($${3:`!p snip.rv = t[2].lower()`})
{
	$this->$3 = $$3;
	return $this;
}$0
endsnippet

snippet getsetf "getter and setter function"
`!p
visibility = t[1].title();
snip.rv = "/**"
snip += ' * Gets ' + t[2]
snip += ' *'
`
 * @return ${5:mixed}
 */
public function get${2:Property}()
{
	return $this->${3:`!p snip.rv = t[2].lower()`};
}

`!p
visibility = t[1].title();
snip.rv = "/**"
snip += ' * Set ' + t[2]
`
`!p
arguments = splitArguments(t[3])
if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = ' *'
	for tag in tags:
		snip += tag
	snip += ''
else:
	snip.rv = ''
` *
 * @return `!p snip.rv = snip.basename`
 */
public function set$2($${4:$3})
{
	$this->$3 = $$4;
	return $this;
}$0
endsnippet

snippet bn "base name"
${1:`!p
snip.rv = snip.basename
`}
endsnippet

snippet ans "namespace declaration" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[a-zA-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
	# snip.rv = snip.rv.title()
	snip.rv = snip.rv[0].upper() + snip.rv[1:]
`};
endsnippet

snippet cl "Class name (file name actually)"
class ${1:`!p snip.rv=snip.basename`}
endsnippet

snippet aclass "Class declaration template" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[a-zA-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
	snip.rv = snip.rv[0].upper() + snip.rv[1:]
`};

/**
 * Class ${1:`!p snip.rv=snip.basename`}
 *
 * @author ${2:`!v g:snips_author`}
 */
class $1
{
}
endsnippet

snippet tclass "Test class declaration"
<?php

/**
 * TestClass ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
class $1 extends TestCase
{
}
endsnippet

snippet htmlcrud "Create html curd functions"
/**
 * Display a listing of the resource.
 *
 * @return \Illuminate\Http\Response
 */
public function index()
{
	return view('${1:entity}.index');
}

/**
 * Show the form for creating a new resource.
 *
 * @return \Illuminate\Http\Response
 */
public function create()
{
	return view('$1.create');
}

/**
 * Store a newly created resource in storage.
 *
 * @param  \Illuminate\Http\Request  $request
 * @return \Illuminate\Http\Response
 */
public function store(Request $request)
{
	return redirect('$1.show');
}

/**
 * Display the specified resource.
 *
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function show($id)
{
	return view('$1.show');
}

/**
 * Show the form for editing the specified resource.
 *
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function edit($id)
{
	return view('$1.edit');
}

/**
 * Update the specified resource in storage.
 *
 * @param  \Illuminate\Http\Request  $request
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function update(Request $request, $id)
{
	return redirect('$1.show');
}

/**
 * Remove the specified resource from storage.
 *
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function destroy($id)
{
	return redirect('$1.index');
}
endsnippet

snippet psy "Psy sh break point"
eval(\Psy\sh());
endsnippet

snippet rpsy "Psy sh break point (with require)"
require_once('psysh'); eval(\Psy\sh()); #make sure psysh is in your include path
endsnippet

snippet zd "Zend_Debug dump"
Zend_Debug::dump($1);
endsnippet

snippet schcr "Laravel Schema::create"
Schema::create('${1:table_name}', function (Blueprint $table) {
	${2:$table->${3:increments}('${4:id}')};$0
});
endsnippet

snippet schdr "Laravel Schema::drop"
Schema::drop('${1:table_name}');$0
endsnippet

snippet schtab "Laravel Schema::table"
Schema::table('${1:table_name}', function (Blueprint $table) {
	${2:$table->${3:increments}('${4:id}')};$0
});
endsnippet

snippet cl "PSR-1 Class"
<?php

/**
 * Class ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '_')  + '_' + snip.basename
`}
 *
 * @author ${2:`!v g:snips_author`}
 */
class $1
{$3
}
endsnippet

snippet cln "PSR-1 Class only"
class ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '_')  + '_' + snip.basename
`}
endsnippet

snippet [] "Expand array" i
[
	$0
]
endsnippet

snippet array "Expand old array without parents" i
array($1)$0
endsnippet

snippet array() "Expand old array" i
array(
	$0
)
endsnippet

snippet []; "Expand array with colon" i
[
	$0
];
endsnippet

snippet [], "Expand array with coma" i
[
	$0
],
endsnippet

snippet []) "Expand last param array" i
[
	$0
])
endsnippet

snippet array()) "Expand last param old array" i
array(
	$0
))
endsnippet

snippet array()); "Expand last param old array with colon" i
array(
	$0
));
endsnippet

snippet array(); "Expand array with colon" i
array(
	$0
);
endsnippet

snippet array(), "Expand array with coma" i
array(
	$0
),
endsnippet

snippet []); "Expand last param array with colon" i
[
	$0
]);
endsnippet

snippet {} "Expand block" i
{
	$0
}
endsnippet

snippet {}; "Expand block with colon" i
{
	$0
};
endsnippet

snippet suppressma "Suppress PHPMD.MethodAware"
@SuppressWarnings(PHPMD.MethodAware)
endsnippet

snippet suppressalv "Suppress PHPMD.AbstractLocalVariable"
@SuppressWarnings(PHPMD.AbstractLocalVariable)
endsnippet

snippet suppresscc "Suppress PHPMD.CyclomaticComplexity"
@SuppressWarnings(PHPMD.CyclomaticComplexity)
endsnippet

snippet suppressepc "Suppress PHPMD.ExcessivePublicCount"
@SuppressWarnings(PHPMD.ExcessivePublicCount)
endsnippet

snippet suppressbgmn "Suppress PHPMD.BooleanGetMethodName"
@SuppressWarnings(PHPMD.BooleanGetMethodName)
endsnippet

snippet suppresscnc "Suppress PHPMD.ConstantNamingConventions"
@SuppressWarnings(PHPMD.ConstantNamingConventions)
endsnippet

snippet suppresslv "Suppress PHPMD.LongVariable"
@SuppressWarnings(PHPMD.LongVariable)
endsnippet

snippet suppresscwnaec "Suppress PHPMD.ConstructorWithNameAsEnclosingClass"
@SuppressWarnings(PHPMD.ConstructorWithNameAsEnclosingClass)
endsnippet

snippet suppresssmn "Suppress PHPMD.ShortMethodName"
@SuppressWarnings(PHPMD.ShortMethodName)
endsnippet

snippet suppresssv "Suppress PHPMD.ShortVariable"
@SuppressWarnings(PHPMD.ShortVariable)
endsnippet

snippet suppressfa "Suppress PHPMD.FunctionAware"
@SuppressWarnings(PHPMD.FunctionAware)
endsnippet

snippet suppressulv "Suppress PHPMD.UnusedLocalVariable"
@SuppressWarnings(PHPMD.UnusedLocalVariable)
endsnippet

snippet suppressupm "Suppress PHPMD.UnusedPrivateMethod"
@SuppressWarnings(PHPMD.UnusedPrivateMethod)
endsnippet

snippet suppressia "Suppress PHPMD.InterfaceAware"
@SuppressWarnings(PHPMD.InterfaceAware)
endsnippet

snippet suppressccvn "Suppress PHPMD.CamelCaseVariableName"
@SuppressWarnings(PHPMD.CamelCaseVariableName)
endsnippet

snippet suppressccpn "Suppress PHPMD.CamelCasePropertyName"
@SuppressWarnings(PHPMD.CamelCasePropertyName)
endsnippet

snippet suppresscccn "Suppress PHPMD.CamelCaseClassName"
@SuppressWarnings(PHPMD.CamelCaseClassName)
endsnippet

snippet suppresssg "Suppress PHPMD.Superglobals"
@SuppressWarnings(PHPMD.Superglobals)
endsnippet

snippet suppressccmn "Suppress PHPMD.CamelCaseMethodName"
@SuppressWarnings(PHPMD.CamelCaseMethodName)
endsnippet

snippet suppressccpn "Suppress PHPMD.CamelCaseParameterName"
@SuppressWarnings(PHPMD.CamelCaseParameterName)
endsnippet

snippet suppressca "Suppress PHPMD.ClassAware"
@SuppressWarnings(PHPMD.ClassAware)
endsnippet

snippet suppressbaf "Suppress PHPMD.BooleanArgumentFlag"
@SuppressWarnings(PHPMD.BooleanArgumentFlag)
endsnippet

snippet suppressee "Suppress PHPMD.ElseExpression"
@SuppressWarnings(PHPMD.ElseExpression)
endsnippet

snippet suppresssa "Suppress PHPMD.StaticAccess"
@SuppressWarnings(PHPMD.StaticAccess)
endsnippet

snippet suppressnoc "Suppress PHPMD.NumberOfChildren"
@SuppressWarnings(PHPMD.NumberOfChildren)
endsnippet

snippet suppressgs "Suppress PHPMD.GotoStatement"
@SuppressWarnings(PHPMD.GotoStatement)
endsnippet

snippet suppresslm "Suppress PHPMD.LongMethod"
@SuppressWarnings(PHPMD.LongMethod)
endsnippet

snippet suppresswmc "Suppress PHPMD.WeightedMethodCount"
@SuppressWarnings(PHPMD.WeightedMethodCount)
endsnippet

snippet suppressee "Suppress PHPMD.ExitExpression"
@SuppressWarnings(PHPMD.ExitExpression)
endsnippet

snippet suppresstmpm "Suppress PHPMD.TooManyPublicMethods"
@SuppressWarnings(PHPMD.TooManyPublicMethods)
endsnippet

snippet suppressee "Suppress PHPMD.EvalExpression"
@SuppressWarnings(PHPMD.EvalExpression)
endsnippet

snippet suppressnc "Suppress PHPMD.NpathComplexity"
@SuppressWarnings(PHPMD.NpathComplexity)
endsnippet

snippet suppresstmm "Suppress PHPMD.TooManyMethods"
@SuppressWarnings(PHPMD.TooManyMethods)
endsnippet

snippet suppressdcf "Suppress PHPMD.DevelopmentCodeFragment"
@SuppressWarnings(PHPMD.DevelopmentCodeFragment)
endsnippet

snippet suppressdoi "Suppress PHPMD.DepthOfInheritance"
@SuppressWarnings(PHPMD.DepthOfInheritance)
endsnippet

snippet suppresslpl "Suppress PHPMD.LongParameterList"
@SuppressWarnings(PHPMD.LongParameterList)
endsnippet

snippet suppresstmf "Suppress PHPMD.TooManyFields"
@SuppressWarnings(PHPMD.TooManyFields)
endsnippet

snippet suppresslc "Suppress PHPMD.LongClass"
@SuppressWarnings(PHPMD.LongClass)
endsnippet

snippet suppresscbo "Suppress PHPMD.CouplingBetweenObjects"
@SuppressWarnings(PHPMD.CouplingBetweenObjects)
endsnippet

snippet suppressupf "Suppress PHPMD.UnusedPrivateField"
@SuppressWarnings(PHPMD.UnusedPrivateField)
endsnippet

snippet suppressufp "Suppress PHPMD.UnusedFormalParameter"
@SuppressWarnings(PHPMD.UnusedFormalParameter)
endsnippet
